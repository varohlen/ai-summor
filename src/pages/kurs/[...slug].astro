---
import { getCollection, type CollectionEntry } from "astro:content";
import AIKursLayout from "../../layouts/AIKursLayout.astro";
import { organizeContent } from "../../utils/OrganizeContent";

type ContentProps = {
    type: 'content';
    entry: CollectionEntry<'ai-kurs'>;
};

type FolderProps = {
    type: 'folder';
    folderTitle: string;
    entries: Array<CollectionEntry<'ai-kurs'>>;
    indexFile?: CollectionEntry<'ai-kurs'>;
};

type Props = ContentProps | FolderProps;

type PathItem = {
    params: { slug: string | undefined };
    props: Props;
};

export async function getStaticPaths() {
    const posts = await getCollection('ai-kurs');
    const { folders } = organizeContent(posts);
    const paths: PathItem[] = [];

    posts.forEach(entry => {
        if (!entry.id.endsWith('index.md')) {
            paths.push({
                params: { slug: entry.slug },
                props: { 
                    type: 'content',
                    entry 
                }
            });
        }
    });

    folders.forEach(([folderName, folderData]) => {
        const indexFile = posts.find(entry => 
            entry.id === `${folderName}/index.md` || 
            entry.id === `${folderName}/index`
        );
        
        const entriesWithoutIndex = folderData.entries.filter(entry => 
            !entry.id.endsWith('index.md') && !entry.id.endsWith('index')
        ) as Array<CollectionEntry<'ai-kurs'>>;
        
        paths.push({
            params: { slug: folderName },
            props: { 
                type: 'folder',
                folderTitle: folderData.title,
                entries: entriesWithoutIndex,
                indexFile: indexFile || undefined
            } as FolderProps
        });
    });

    return paths;
}

const props = Astro.props as Props;
const isContentPage = props.type === 'content';

let Content: any;
if (isContentPage) {
    const rendered = await props.entry.render();
    Content = rendered.Content;
} else if (props.indexFile) {
    const rendered = await props.indexFile.render();
    Content = rendered.Content;
}
---

{isContentPage ? (
    <AIKursLayout frontmatter={props.entry.data} url={`/kurs/${props.entry.slug}`}>
        <article class="prose dark:prose-invert max-w-none w-full">
            {Content && <Content />}
        </article>
    </AIKursLayout>
) : (
    <AIKursLayout 
        frontmatter={{ 
            title: props.folderTitle,
            description: props.indexFile?.data.description
        }} 
        url={`/kurs/${Astro.params.slug}`}
        isFolder={true}
    >
        {props.indexFile && Content && (
            <div class="prose dark:prose-invert max-w-none w-full mb-8">
                <Content />
            </div>
        )}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {props.entries.map((entry) => {
                const type = entry.data.tags?.includes("sammanfattning") ? "sammanfattning" :
                           entry.data.tags?.includes("info") ? "info" :
                           entry.data.tags?.includes("uppgift") ? "uppgift" : "default";

                const styles = {
                    sammanfattning: "border-l-blue-500 hover:bg-blue-500/5 dark:hover:bg-blue-500/10",
                    info: "border-l-yellow-500 hover:bg-yellow-500/5 dark:hover:bg-yellow-500/10",
                    uppgift: "border-l-emerald-500 hover:bg-emerald-500/5 dark:hover:bg-emerald-500/10",
                    default: "border-l-border hover:bg-muted/50 dark:hover:bg-dark-muted/50"
                } as const;

                return (
                    <a
                        href={`/kurs/${entry.slug}`}
                        class={`block p-4 bg-card dark:bg-dark-card rounded-lg border-l-4 ${styles[type]} transition-colors`}
                    >
                        <div class="font-medium">{entry.data.title}</div>
                        {entry.data.description && (
                            <p class="text-sm text-muted-foreground mt-1">
                                {entry.data.description}
                            </p>
                        )}
                    </a>
                );
            })}
        </div>
    </AIKursLayout>
)}
