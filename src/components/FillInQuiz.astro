---
export interface Props {
  question: string;
  correctAnswers?: (string | number)[]; // Made optional for freeResponse
  correctAnswer?: (string | number)[] | string | number; // Deprecated, use correctAnswers
  explanation?: string;
  placeholder?: string;
  caseSensitive?: boolean;
  type?: 'text' | 'number';
  quizId?: string; // Optional stable ID for tracking
  freeResponse?: boolean; // New: Accept any answer
  hint?: string; // Optional hint text
}

const { 
  question, 
  correctAnswers,
  correctAnswer, // Deprecated fallback
  explanation, 
  placeholder = 'Skriv ditt svar hÃ¤r...', 
  caseSensitive = false,
  type = 'text',
  quizId,
  freeResponse = false,
  hint
} = Astro.props;

const finalQuizId = quizId || `quiz-${Math.random().toString(36).substr(2, 9)}`;

// Handle both correctAnswers (new) and correctAnswer (deprecated)
let correctAnswersArray: (string | number)[] = [];
if (correctAnswers) {
  correctAnswersArray = correctAnswers;
} else if (correctAnswer) {
  correctAnswersArray = Array.isArray(correctAnswer) ? correctAnswer : [correctAnswer];
}
---

<div class="quiz-container my-6 p-6 rounded-lg border border-border dark:border-dark-border bg-card dark:bg-dark-card">
  <h4 class="text-lg font-semibold mb-4 text-foreground dark:text-dark-foreground">{question}</h4>
  {hint && (
    <p class="text-sm text-muted-foreground dark:text-dark-muted-foreground mb-2 italic">
      ðŸ’¡ {hint}
    </p>
  )}
  <div class="input-container mb-4">
    <input 
      type={type}
      class="answer-input w-full p-3 rounded-md border border-border dark:border-dark-border bg-background dark:bg-dark-background text-foreground dark:text-dark-foreground focus:ring-2 focus:ring-primary focus:border-primary"
      placeholder={placeholder}
      data-quiz-id={finalQuizId}
    />
  </div>
  <button 
    class="check-answer-btn w-full bg-primary text-primary-foreground py-2 px-4 rounded-md hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
    data-quiz-id={finalQuizId}
    data-correct-answers={JSON.stringify(correctAnswersArray)}
    data-case-sensitive={caseSensitive}
    data-free-response={freeResponse}
    disabled
  >
    Kontrollera svar
  </button>

  <div class="feedback-container mt-4 p-4 rounded-md hidden" data-quiz-id={finalQuizId}>
    <p class="feedback-text font-medium mb-2"></p>
    {explanation && (
      <p class="explanation-text text-sm text-muted-foreground dark:text-dark-muted-foreground mt-2">
        <strong>FÃ¶rklaring:</strong> {explanation}
      </p>
    )}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const checkButtons = document.querySelectorAll('.check-answer-btn');
    
    // Enable button and clear feedback when user types
    const inputs = document.querySelectorAll('.answer-input');
    inputs.forEach(input => {
      input.addEventListener('input', () => {
        const quizId = input.getAttribute('data-quiz-id');
        const button = document.querySelector(`.check-answer-btn[data-quiz-id="${quizId}"]`) as HTMLButtonElement;
        const feedbackContainer = document.querySelector(`.feedback-container[data-quiz-id="${quizId}"]`) as HTMLElement;
        const feedbackText = feedbackContainer?.querySelector('.feedback-text') as HTMLElement;
        
        // Enable/disable button based on input
        if (button && !button.classList.contains('opacity-50')) {
          if ((input as HTMLInputElement).value.trim()) {
            button.removeAttribute('disabled');
          } else {
            button.setAttribute('disabled', 'true');
          }
        }
        
        // Hide feedback and reset colors
        if (feedbackContainer) {
          feedbackContainer.classList.add('hidden');
          feedbackContainer.classList.remove('bg-red-100', 'dark:bg-red-900/20', 'bg-green-100', 'dark:bg-green-900/20');
        }
        
        if (feedbackText) {
          feedbackText.classList.remove('text-red-700', 'dark:text-red-300', 'text-green-700', 'dark:text-green-300');
          feedbackText.textContent = '';
        }
        
        // Remove border colors
        input.classList.remove('border-red-500', 'border-green-500');
      });
    });
    
    checkButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Check if already answered
        if (button.hasAttribute('disabled')) {
          return;
        }
        
        const quizId = button.getAttribute('data-quiz-id');
        const correctAnswers = JSON.parse(button.getAttribute('data-correct-answers') || '[]');
        const caseSensitive = button.getAttribute('data-case-sensitive') === 'true';
        const freeResponse = button.getAttribute('data-free-response') === 'true';
        const input = document.querySelector(`input[data-quiz-id="${quizId}"]`) as HTMLInputElement;
        const feedbackContainer = document.querySelector(`.feedback-container[data-quiz-id="${quizId}"]`) as HTMLElement;
        const feedbackText = feedbackContainer?.querySelector('.feedback-text') as HTMLElement;
        
        if (!input || !input.value.trim()) {
          return; // Button should be disabled, but just in case
        }
        
        let userAnswer = input.value.trim();
        
        // Check if answer is correct
        let isCorrect = false;
        if (freeResponse) {
          // Free response mode - always accept the answer
          isCorrect = true;
        } else {
          // Normal mode - check against correct answers
          isCorrect = correctAnswers.some((correct: string) => {
            const correctStr = String(correct).trim();
            const userStr = caseSensitive ? userAnswer : userAnswer.toLowerCase();
            const correctCompare = caseSensitive ? correctStr : correctStr.toLowerCase();
            return userStr === correctCompare;
          });
        }
        
        // Show feedback
        if (feedbackContainer && feedbackText) {
          feedbackContainer.classList.remove('hidden');
          
          if (isCorrect) {
            feedbackContainer.classList.remove('bg-red-100', 'dark:bg-red-900/20');
            feedbackContainer.classList.add('bg-green-100', 'dark:bg-green-900/20');
            feedbackText.classList.remove('text-red-700', 'dark:text-red-300');
            feedbackText.classList.add('text-green-700', 'dark:text-green-300');
            feedbackText.textContent = 'âœ“ RÃ¤tt svar!';
            
            // Show explanation only on correct answer
            const explanationText = feedbackContainer.querySelector('.explanation-text') as HTMLElement;
            if (explanationText) {
              explanationText.classList.remove('hidden');
            }
            
            input.classList.remove('border-red-500');
            input.classList.add('border-green-500');
            
            // Save completion to localStorage
            const pageUrl = window.location.pathname;
            const completedQuizzes = JSON.parse(localStorage.getItem('completedQuizzes') || '{}');
            if (!completedQuizzes[pageUrl]) {
              completedQuizzes[pageUrl] = [];
            }
            if (!completedQuizzes[pageUrl].includes(quizId)) {
              completedQuizzes[pageUrl].push(quizId);
              localStorage.setItem('completedQuizzes', JSON.stringify(completedQuizzes));
              
              // Dispatch event for progress tracking
              window.dispatchEvent(new CustomEvent('quizCompleted', { 
                detail: { quizId, pageUrl } 
              }));
            }
            
            // Disable input and button after correct answer
            input.setAttribute('disabled', 'true');
            button.setAttribute('disabled', 'true');
            button.classList.add('opacity-50', 'cursor-not-allowed');
          } else {
            feedbackContainer.classList.remove('bg-green-100', 'dark:bg-green-900/20');
            feedbackContainer.classList.add('bg-red-100', 'dark:bg-red-900/20');
            feedbackText.classList.remove('text-green-700', 'dark:text-green-300');
            feedbackText.classList.add('text-red-700', 'dark:text-red-300');
            feedbackText.textContent = 'âœ— Fel svar. FÃ¶rsÃ¶k igen!';
            
            // Hide explanation on wrong answer
            const explanationText = feedbackContainer.querySelector('.explanation-text') as HTMLElement;
            if (explanationText) {
              explanationText.classList.add('hidden');
            }
            
            input.classList.remove('border-green-500');
            input.classList.add('border-red-500');
            
            // Allow trying again - don't disable input or button
          }
        }
      });
    });
    
    // Allow Enter key to submit
    const enterInputs = document.querySelectorAll('.answer-input');
    enterInputs.forEach(input => {
      input.addEventListener('keypress', (e) => {
        if ((e as KeyboardEvent).key === 'Enter') {
          const quizId = input.getAttribute('data-quiz-id');
          const button = document.querySelector(`.check-answer-btn[data-quiz-id="${quizId}"]`) as HTMLButtonElement;
          if (button && !button.disabled) {
            button.click();
          }
        }
      });
    });
  });
</script>

<style>
  .quiz-container {
    font-family: inherit;
  }
  
  .answer-input:focus {
    outline: none;
  }
</style>
